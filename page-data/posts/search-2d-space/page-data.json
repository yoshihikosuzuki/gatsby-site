{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/search-2d-space","result":{"data":{"markdownRemark":{"id":"7b2d7ba6-20bf-50aa-8e71-3377df7ac927","html":"<h2 id=\"目次\" style=\"position:relative;\"><a href=\"#%E7%9B%AE%E6%AC%A1\" aria-label=\"目次 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>目次</h2>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#%E5%95%8F%E9%A1%8C%E3%81%AE%E8%A6%81%E7%B4%84\">問題の要約</a></li>\n<li>\n<p><a href=\"#%E3%82%B3%E3%83%BC%E3%83%89\">コード</a></p>\n<ul>\n<li><a href=\"#%E5%8D%98%E7%B4%94%E3%81%AA-bfs\">単純な BFS</a></li>\n<li><a href=\"#a%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0\">A*アルゴリズム</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<p>二次元平面上の探索で、上下左右以外の移動を使う問題を探していたのだが、ちょうど良さそうな<a href=\"https://hoj.hamako-ths.ed.jp/onlinejudge/contest/93/problems/1\" target=\"_blank\" rel=\"noopener noreferrer\">問題</a>を見つけたので解く。ただし、公式解答は無い。</p>\n<h2 id=\"問題の要約\" style=\"position:relative;\"><a href=\"#%E5%95%8F%E9%A1%8C%E3%81%AE%E8%A6%81%E7%B4%84\" aria-label=\"問題の要約 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>問題の要約</h2>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mo>×</mo><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">H\\times W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span></span></span></span>の二次元平面</li>\n<li>各点は<code class=\"language-text\">S</code>(スタート; 1 つ)、<code class=\"language-text\">#</code>(通れない)、<code class=\"language-text\">.</code>(通れる)、<code class=\"language-text\">1</code>から<code class=\"language-text\">N</code>(それぞれ 1 つ)からなる</li>\n<li>移動はコスト 1 で以下の<code class=\"language-text\">S</code> -> <code class=\"language-text\">*</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\">. * * * .\n* . . . *\n* . S . *\n* . . . *\n. * * * .</code></pre></div>\n<ul>\n<li><code class=\"language-text\">1</code>から<code class=\"language-text\">N</code>の順に辿った時の総コストの最小値を求める</li>\n<li>どこかで到達不可能なら<code class=\"language-text\">&quot;YOU MUST SYU-CHING!&quot;</code>を出力</li>\n</ul>\n<h2 id=\"コード\" style=\"position:relative;\"><a href=\"#%E3%82%B3%E3%83%BC%E3%83%89\" aria-label=\"コード permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>コード</h2>\n<h3 id=\"単純な-bfs\" style=\"position:relative;\"><a href=\"#%E5%8D%98%E7%B4%94%E3%81%AA-bfs\" aria-label=\"単純な bfs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>単純な BFS</h3>\n<p>次の目的地までの最小コストを BFS で計算、を繰り返すだけ。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> LL <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">using</span> PII <span class=\"token operator\">=</span> pair<span class=\"token operator\">&lt;</span>LL<span class=\"token punctuation\">,</span> LL<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">using</span> VI <span class=\"token operator\">=</span> vector<span class=\"token operator\">&lt;</span>LL<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">using</span> VVI <span class=\"token operator\">=</span> vector<span class=\"token operator\">&lt;</span>VI<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> VB <span class=\"token operator\">=</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">using</span> VS <span class=\"token operator\">=</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">using</span> VP <span class=\"token operator\">=</span> vector<span class=\"token operator\">&lt;</span>PII<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> VV(T)        vector&lt;vector&lt;T>></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> PB           push_back</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> MP           make_pair</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SZ(a)        LL((a).size())</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> EACH(x, c)   for (auto x : (c))</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ALL(c)       (c).begin(), (c).end()</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> REVERSE(c)   reverse(ALL(c))</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SORT(c)      stable_sort(ALL(c))</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> RSORT(c)     stable_sort((c).rbegin(), (c).rend())</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> FOR(i, a, b) for (LL i = (a); i &lt; (b); ++i)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> REP(i, n)    FOR(i, 0, n)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> DEBUG true</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> $(x) {if (DEBUG) {cout &lt;&lt; #x &lt;&lt; \" = \" &lt;&lt; (x) &lt;&lt; endl;}}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n    LL i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// define the moves</span>\n    vector<span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">></span> moves<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">FOR</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">FOR</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> j <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span> <span class=\"token operator\">||</span> j <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                moves<span class=\"token punctuation\">.</span><span class=\"token function\">PB</span><span class=\"token punctuation\">(</span>Point<span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// load cin</span>\n    LL H<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> H <span class=\"token operator\">>></span> W<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> N<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">VV</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>H<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">></span> <span class=\"token function\">dests</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// point 1, 2, ..., N</span>\n    Point curr<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// point S</span>\n    <span class=\"token function\">REP</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> H<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">REP</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            cin <span class=\"token operator\">>></span> map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'S'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                curr <span class=\"token operator\">=</span> Point<span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                dests<span class=\"token punctuation\">[</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Point<span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    LL total_d <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">EACH</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">,</span> dests<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// search a way from &lt;curr> to &lt;dest> by BFS</span>\n        queue<span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span>\n        q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">VV</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token function\">visited</span><span class=\"token punctuation\">(</span>H<span class=\"token punctuation\">,</span> <span class=\"token function\">VB</span><span class=\"token punctuation\">(</span>W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        LL max_d <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> reached <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> p<span class=\"token punctuation\">.</span>i <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token punctuation\">.</span>i <span class=\"token operator\">&lt;</span> H <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> p<span class=\"token punctuation\">.</span>j <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token punctuation\">.</span>j <span class=\"token operator\">&lt;</span> W <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'#'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                visited<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                max_d <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>i <span class=\"token operator\">==</span> dest<span class=\"token punctuation\">.</span>i <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token punctuation\">.</span>j <span class=\"token operator\">==</span> dest<span class=\"token punctuation\">.</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// reached</span>\n                    total_d <span class=\"token operator\">+=</span> max_d<span class=\"token punctuation\">;</span>\n                    reached <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token function\">EACH</span><span class=\"token punctuation\">(</span>move<span class=\"token punctuation\">,</span> moves<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>Point<span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">.</span>i <span class=\"token operator\">+</span> move<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>j <span class=\"token operator\">+</span> move<span class=\"token punctuation\">.</span>j<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>d <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>reached<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// no path to &lt;dest></span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"YOU MUST SYU-CHING!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        curr <span class=\"token operator\">=</span> dest<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// update destination</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> total_d <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"aアルゴリズム\" style=\"position:relative;\"><a href=\"#a%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0\" aria-label=\"aアルゴリズム permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A*アルゴリズム</h3>\n<p><a href=\"https://www.redblobgames.com/pathfinding/a-star/introduction.html\" target=\"_blank\" rel=\"noopener noreferrer\">A*アルゴリズム</a>を使ってより効率的に解く。A*アルゴリズムは</p>\n<ul>\n<li><strong>開始位置からの距離</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span></span></span></span> に基づいた優先度付き Dijkstra 法 (最適保証あり) と</li>\n<li><strong>目的地までの推定距離</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">h</span></span></span></span> に基づいた優先度付き貪欲 BFS (最適保証なし; 推定距離なので)</li>\n</ul>\n<p>を組み合わせた手法で、優先度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>=</mo><mi>g</mi><mo>+</mo><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">f=g+h</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">h</span></span></span></span> に基づいた探索を行う。このとき、目的地までの真の距離 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>h</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat{h}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9578799999999998em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9578799999999998em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span></span></span><span style=\"top:-3.26344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">^</span></span></span></span></span></span></span></span></span></span> に対して常に <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>h</mi><mo>≤</mo><mover accent=\"true\"><mi>h</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">0\\leq h\\leq\\hat{h}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">h</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9578799999999998em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9578799999999998em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">h</span></span></span><span style=\"top:-3.26344em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">^</span></span></span></span></span></span></span></span></span></span> が成り立つなら、最適解が保証される。</p>\n<p>上下移動だけであれば <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">h</span></span></span></span> を Manhattan 距離(= L1 ノルム)にすれば良いのだが、一般の移動に対しては移動コストの上限をちゃんと考えないといけない。</p>\n<p>今回の場合は、2 点 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x,y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 間の推定距離を <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌈</mo><mfrac><mrow><mo>∥</mo><mi>x</mi><mo>−</mo><mi>y</mi><msub><mo>∥</mo><mi mathvariant=\"normal\">∞</mi></msub></mrow><mn>2</mn></mfrac><mo stretchy=\"false\">⌉</mo></mrow><annotation encoding=\"application/x-tex\">\\lceil\\frac{\\parallel x-y\\parallel_\\infty}{2}\\rceil</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.355em;vertical-align:-0.345em;\"></span><span class=\"mopen\">⌈</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">∥</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"mrel mtight\"><span class=\"mrel mtight\">∥</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌉</span></span></span></span> (=最大値ノルムを 2 で割ったものを切り上げ)とすると大丈夫(なはず)。つまり最大値ノルム 2 ごとに距離が 1 ずつ増えていく。図で書くと、点<code class=\"language-text\">X</code>に対して<code class=\"language-text\">.</code>全てが距離 1 の点となる(<code class=\"language-text\">X</code>自身は距離 0)。</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\">. . . . .\n. . . . .\n. . X . .\n. . . . .\n. . . . .</code></pre></div>\n<p>マクロ等は上と同じなので省略してある。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n    LL i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> PP <span class=\"token operator\">=</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span> Point<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// first is priority = [cost so far] + [est_dist to the destination]</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> PP<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PP<span class=\"token operator\">&amp;</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">double</span> <span class=\"token function\">est_dist</span><span class=\"token punctuation\">(</span>Point x<span class=\"token punctuation\">,</span> Point y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// estimated distance from point x to y</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>i <span class=\"token operator\">-</span> y<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>j <span class=\"token operator\">-</span> y<span class=\"token punctuation\">.</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* (中略; 上と同じ) */</span>\n\n    LL total_d <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">EACH</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">,</span> dests<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// search a way from &lt;curr> to &lt;dest> by A* algorithm</span>\n        priority_queue<span class=\"token operator\">&lt;</span>PP<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>PP<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span>PP<span class=\"token operator\">>></span> q<span class=\"token punctuation\">;</span>\n        q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">MP</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.</span><span class=\"token punctuation\">,</span> curr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        VVI <span class=\"token function\">cost</span><span class=\"token punctuation\">(</span>H<span class=\"token punctuation\">,</span> <span class=\"token function\">VI</span><span class=\"token punctuation\">(</span>W<span class=\"token punctuation\">,</span> LLONG_MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// using unordered_map is better if search space is sparse</span>\n        cost<span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">.</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        LL max_d <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> reached <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">auto</span> p <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            max_d <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>i <span class=\"token operator\">==</span> dest<span class=\"token punctuation\">.</span>i <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token punctuation\">.</span>j <span class=\"token operator\">==</span> dest<span class=\"token punctuation\">.</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// reached</span>\n                total_d <span class=\"token operator\">+=</span> max_d<span class=\"token punctuation\">;</span>\n                reached <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">EACH</span><span class=\"token punctuation\">(</span>move<span class=\"token punctuation\">,</span> moves<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">auto</span> next_i <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>i <span class=\"token operator\">+</span> move<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">,</span> next_j <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>j <span class=\"token operator\">+</span> move<span class=\"token punctuation\">.</span>j<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> next_i <span class=\"token operator\">&amp;&amp;</span> next_i <span class=\"token operator\">&lt;</span> H <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> next_j <span class=\"token operator\">&amp;&amp;</span> next_j <span class=\"token operator\">&lt;</span> W <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>next_i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next_j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">auto</span> new_cost <span class=\"token operator\">=</span> cost<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">[</span>next_i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next_j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> new_cost<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        cost<span class=\"token punctuation\">[</span>next_i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next_j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> new_cost<span class=\"token punctuation\">;</span>\n                        Point next<span class=\"token punctuation\">{</span>next_i<span class=\"token punctuation\">,</span> next_j<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>d <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                        q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">MP</span><span class=\"token punctuation\">(</span>new_cost <span class=\"token operator\">+</span> <span class=\"token function\">est_dist</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>reached<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// no path to &lt;dest></span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"YOU MUST SYU-CHING!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        curr <span class=\"token operator\">=</span> dest<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// update destination</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> total_d <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"/posts/search-2d-space","tagSlugs":["/tag/algorithm/","/tag/search-algorithm/","/tag/programming/"]},"frontmatter":{"date":"2019-07-14","description":"二次元平面上の探索で、上下左右以外の移動を使う問題を解く。","tags":["Algorithm","Search algorithm","Programming"],"title":"二次元平面の少し複雑な探索"}}},"pageContext":{"slug":"/posts/search-2d-space"}}}