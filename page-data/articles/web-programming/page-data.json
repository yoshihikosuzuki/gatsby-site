{"componentChunkName":"component---src-templates-post-template-js","path":"/articles/web-programming","result":{"data":{"markdownRemark":{"id":"eab86d0c-21b9-5888-9e16-67c2f2d05fec","html":"<div align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/kamranahmedse/developer-roadmap/master/img/frontend.png\" width=\"800px\">\n</div>\n<p>↑ (<a href=\"https://github.com/kamranahmedse/developer-roadmap\" target=\"_blank\" rel=\"noopener noreferrer\">Roadmap to becoming a web developer</a> より引用)</p>\n<h2 id=\"javascript-es2015--es6\" style=\"position:relative;\"><a href=\"#javascript-es2015--es6\" aria-label=\"javascript es2015  es6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Javascript (ES2015 = ES6)</h2>\n<ul>\n<li><a href=\"https://qiita.com/soarflat/items/b251caf9cb59b72beb9b\" target=\"_blank\" rel=\"noopener noreferrer\">Qiita - ES2015(ES6) 入門</a></li>\n</ul>\n<h2 id=\"node\" style=\"position:relative;\"><a href=\"#node\" aria-label=\"node permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node</h2>\n<h3 id=\"npm-node-package-manager\" style=\"position:relative;\"><a href=\"#npm-node-package-manager\" aria-label=\"npm node package manager permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm (Node Package Manager)</h3>\n<ul>\n<li>\n<p>新規プロジェクト作成</p>\n<ul>\n<li><code class=\"language-text\">$ npm init -y</code> (<code class=\"language-text\">-y</code>は非対話モード)</li>\n<li><code class=\"language-text\">package.json</code>が作られる</li>\n</ul>\n</li>\n<li>\n<p>パッケージのインストール</p>\n<ul>\n<li><code class=\"language-text\">node_modules/</code>にインストールしたモジュールや実行ファイルには自動でパスが通るので、後述の npm scripts や<code class=\"language-text\">require()</code>ではプレフィックスは不要</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>コマンド</th>\n<th>インストール先</th>\n<th><code class=\"language-text\">package.json</code>との関係</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">$ npm install -g パッケージ名</code></td>\n<td>環境全体</td>\n<td>依存関係には追加されない(が、記述すべき)</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">$ npm install --save-dev パッケージ名</code></td>\n<td><code class=\"language-text\">./node_modules/</code></td>\n<td><code class=\"language-text\">devDependencies</code>にパッケージ名を追加</td>\n<td>開発時にだけ使用するパッケージ</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">$ npm install --save パッケージ名</code></td>\n<td><code class=\"language-text\">./node_modules/</code></td>\n<td><code class=\"language-text\">dependencies</code>にパッケージ名を追加</td>\n<td>実行時に(も)使用するパッケージ</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">$ npm install</code></td>\n<td><code class=\"language-text\">./node_modules/</code></td>\n<td>記述されている依存パッケージを全てインストール</td>\n<td>既存レポジトリを clone した場合など</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>現在インストールされているバージョンと最新のバージョンを確認</p>\n<ul>\n<li><code class=\"language-text\">$ npm outdated [-g|--save|--save-dev]</code></li>\n<li>アップデート自体はインストールと同じコマンドで可能</li>\n</ul>\n</li>\n<li>\n<p>npm scripts</p>\n<ul>\n<li><code class=\"language-text\">package.json</code>中の<code class=\"language-text\">&quot;scripts&quot;</code>で定義されたコマンド群のこと</li>\n<li><code class=\"language-text\">$ npm run</code>で一覧を表示できる</li>\n<li>以下のような記述のとき、<code class=\"language-text\">タスク名</code> = <code class=\"language-text\">install</code>, <code class=\"language-text\">start</code>, <code class=\"language-text\">test</code>等なら<code class=\"language-text\">$ npm タスク名</code>で、その他(<code class=\"language-text\">build</code>等)は<code class=\"language-text\">$ npm run タスク名</code>で、<code class=\"language-text\">コマンド</code>を実行可能</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"タスク名\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"コマンド\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"標準モジュール\" style=\"position:relative;\"><a href=\"#%E6%A8%99%E6%BA%96%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB\" aria-label=\"標準モジュール permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>標準モジュール</h3>\n<ul>\n<li><a href=\"http://yohshiy.blog.fc2.com/blog-entry-310.html\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js 標準モジュール</a></li>\n<li>\n<p>JSON ファイル入力(JSON ファイル -> JSON 文字列 -> JS Object)</p>\n<ul>\n<li><code class=\"language-text\">const data = JSON.parse(fs.readFileSync(fileName, &#39;utf8&#39;))</code></li>\n</ul>\n</li>\n<li>\n<p>JSON ファイル出力(JS Object -> JSON 文字列 -> JSON ファイル)</p>\n<ul>\n<li><code class=\"language-text\">fs.writeFile(fileName, JSON.stringify(data))</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"css-sass-js\" style=\"position:relative;\"><a href=\"#css-sass-js\" aria-label=\"css sass js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS, Sass, JS</h2>\n<ul>\n<li><a href=\"http://coliss.com/articles/build-websites/operation/javascript/best-javascript-libs-jquery-plugins-2016.html\" target=\"_blank\" rel=\"noopener noreferrer\">JS ライブラリ、jQuery プラグインまとめ</a></li>\n<li><a href=\"https://webliker.info/css-selector-cheat-sheet/\" target=\"_blank\" rel=\"noopener noreferrer\">CSS セレクタのチートシート</a></li>\n<li><a href=\"https://material-ui.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Material-UI</a>: <code class=\"language-text\">$ npm install --save @material-ui/core</code></li>\n<li>Node と Sass を使うなら<code class=\"language-text\">$ npm install --save-dev node-sass</code></li>\n</ul>\n<h2 id=\"electron\" style=\"position:relative;\"><a href=\"#electron\" aria-label=\"electron permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Electron</h2>\n<h3 id=\"hello-world\" style=\"position:relative;\"><a href=\"#hello-world\" aria-label=\"hello world permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hello, World</h3>\n<ol>\n<li><code class=\"language-text\">$ npm init -y</code>で新規プロジェクトを作成</li>\n<li>\n<p><a href=\"https://electronjs.org/docs/tutorial/quick-start\" target=\"_blank\" rel=\"noopener noreferrer\">公式 Quick Start</a> に従って<code class=\"language-text\">main.js</code>と<code class=\"language-text\">index.html</code>をコピペ</p>\n<ul>\n<li><code class=\"language-text\">package.json</code>中の<code class=\"language-text\">&quot;main&quot;</code>は上の<code class=\"language-text\">main.js</code>に変更しておく</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">$ electron .</code>で実行</p>\n<ul>\n<li>npm script で<code class=\"language-text\">&quot;start&quot;: &quot;electron .&quot;</code>としておけば、<code class=\"language-text\">$ npm start</code>でも OK</li>\n</ul>\n</li>\n<li>アプリケーション実行ファイルの生成には <a href=\"https://github.com/electron/electron-packager\" target=\"_blank\" rel=\"noopener noreferrer\">electron-packager</a> を使う(<code class=\"language-text\">$ npm install -g electron-packager</code>)</li>\n</ol>\n<h3 id=\"visual-studio-code-で開発・デバッグできるようにする\" style=\"position:relative;\"><a href=\"#visual-studio-code-%E3%81%A7%E9%96%8B%E7%99%BA%E3%83%BB%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B\" aria-label=\"visual studio code で開発・デバッグできるようにする permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Visual Studio Code で開発・デバッグできるようにする</h3>\n<ol>\n<li>(グローバルではなく)レポジトリに Electron をインストール</li>\n<li>VSC に拡張機能<code class=\"language-text\">Debugger for Chrome</code>をインストール</li>\n<li>\n<p>一度実行(F5)して<code class=\"language-text\">.vscode/launch.json</code>生成後、<a href=\"https://electronjs.org/docs/tutorial/debugging-main-process-vscode\" target=\"_blank\" rel=\"noopener noreferrer\">公式ドキュメント</a>に従って内容を変更し、再度実行</p>\n<ul>\n<li>ビルドはしてくれないので、コードを変更したらターミナルでビルドし直してから再度実行</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"electron-実行時の処理の流れ\" style=\"position:relative;\"><a href=\"#electron-%E5%AE%9F%E8%A1%8C%E6%99%82%E3%81%AE%E5%87%A6%E7%90%86%E3%81%AE%E6%B5%81%E3%82%8C\" aria-label=\"electron 実行時の処理の流れ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Electron 実行時の処理の流れ</h3>\n<ol>\n<li><code class=\"language-text\">electron DIR_NAME</code>すると、<code class=\"language-text\">DIR_NAME/package.json</code>の<code class=\"language-text\">&quot;main&quot;</code>で指定されている JS ファイル(<code class=\"language-text\">main.js</code>)が Main process として実行される</li>\n<li><code class=\"language-text\">app.on(&#39;ready&#39;, …)</code>の<code class=\"language-text\">createWindow</code>でウィンドウが生成される</li>\n<li><code class=\"language-text\">createWindow</code>の中で、<code class=\"language-text\">electron.BrowserWindow</code>インスタンスの<code class=\"language-text\">loadURL()</code>で<code class=\"language-text\">index.html</code>が読み込まれる</li>\n<li><code class=\"language-text\">index.html</code>で読み込まれる JS ファイルが Renderer process として実行される</li>\n</ol>\n<h3 id=\"main-renderer-プロセス間のやり取り\" style=\"position:relative;\"><a href=\"#main-renderer-%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E9%96%93%E3%81%AE%E3%82%84%E3%82%8A%E5%8F%96%E3%82%8A\" aria-label=\"main renderer プロセス間のやり取り permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Main-Renderer プロセス間のやり取り</h3>\n<ul>\n<li>プロセス間通信(IPC)を使う</li>\n<li>\n<p><code class=\"language-text\">ipc</code>は現在の API には無く、代わりに <a href=\"https://electronjs.org/docs/api/ipc-main\" target=\"_blank\" rel=\"noopener noreferrer\">ipcMain</a>/<a href=\"https://electronjs.org/docs/api/ipc-renderer\" target=\"_blank\" rel=\"noopener noreferrer\">ipcRederer</a> を使う(cf. <a href=\"https://qiita.com/gcmae/items/cb6eb18be2f4ffae60b5\" target=\"_blank\" rel=\"noopener noreferrer\">Electron の IPC をまとめる</a>)</p>\n<ul>\n<li><code class=\"language-text\">&lt;channel&gt;</code>は文字列、<code class=\"language-text\">&lt;listerner&gt;</code>は<code class=\"language-text\">(event, arg) =&gt; {...}</code>という関数</li>\n<li><code class=\"language-text\">event.returnValue</code>に代入すれば同期的に返信(送信側の返り値になる)</li>\n<li><code class=\"language-text\">event.sender.Send(&lt;channel&gt;[, &lt;args&gt;])</code>で非同期的に返信(再度<code class=\"language-text\">on</code>で受信)</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Sender -> Receiver (非同期通信)</th>\n<th>Method in Sender</th>\n<th>Method in Receiver</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Main -> Renderer</td>\n<td><code class=\"language-text\">&lt;BrowserWindow&gt;.webContents.send(&lt;channel&gt;[, &lt;args&gt;])</code></td>\n<td><code class=\"language-text\">ipcRenderer.on(&lt;chennel&gt;, &lt;listener&gt;)</code></td>\n</tr>\n<tr>\n<td>Renderer -> Main</td>\n<td><code class=\"language-text\">ipcRenderer.send(&lt;channel&gt;[, &lt;args&gt;])</code></td>\n<td><code class=\"language-text\">ipcMain.on(&lt;channel&gt;, &lt;listener&gt;)</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"設定ファイル\" style=\"position:relative;\"><a href=\"#%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\" aria-label=\"設定ファイル permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>設定ファイル</h3>\n<ul>\n<li><a href=\"https://github.com/sindresorhus/electron-store\" target=\"_blank\" rel=\"noopener noreferrer\">electron-store</a> を使う</li>\n<li>デフォルトでは<code class=\"language-text\">/Users/USER_NAME/Library/Application\\ Support/APP_NAME/config.json</code>に保存される</li>\n</ul>\n<h2 id=\"webpack\" style=\"position:relative;\"><a href=\"#webpack\" aria-label=\"webpack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Webpack</h2>\n<ul>\n<li><code class=\"language-text\">$ npm install --save-dev webpack webpack-cli</code></li>\n<li><a href=\"https://qiita.com/soarflat/items/28bf799f7e0335b68186\" target=\"_blank\" rel=\"noopener noreferrer\">webpack 4 入門</a></li>\n<li>複数ファイルに分割して開発された JS, CSS, etc. を 1 つの JS ファイルにまとめる(<strong>モジュールバンドル</strong>)</li>\n<li>Electron と使う場合は<code class=\"language-text\">target:electron-main</code>や<code class=\"language-text\">target: electron-renderer</code>を指定しないとエラーになる</li>\n<li>\n<p>ローダー</p>\n<ul>\n<li><code class=\"language-text\">$ npm install --save-dev css-loader mini-css-extract-plugin</code>: CSS</li>\n<li><code class=\"language-text\">$ npm install --save-dev sass-loader node-sass</code>: SCSS</li>\n<li><code class=\"language-text\">$ npm install --save-dev babel-loader</code>: Babel</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"babel\" style=\"position:relative;\"><a href=\"#babel\" aria-label=\"babel permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">$ npm install --save-dev @babel/core @babel/preset-env</code></p>\n<ul>\n<li>React と使う場合は <code class=\"language-text\">$ npm install --save-dev @babel/preset-react</code>も</li>\n</ul>\n</li>\n<li>\n<p>トランスパイラ</p>\n<ul>\n<li>変換したい言語に合わせた<strong>プラグイン</strong>をコンフィグファイル(<code class=\"language-text\">.babelrc</code>等)中に指定する必要がある</li>\n<li>React のようなフレームワークには必要なプラグイン集合が<strong>プリセット</strong>で用意されていて、簡単に指定できる</li>\n</ul>\n</li>\n<li>\n<p>Webpack と使う場合は、<code class=\"language-text\">webpack.config.js</code>で<code class=\"language-text\">babel-loader</code>をローダーに指定して、プリセットの指定は以下のどちらかで行う(cf. <a href=\"https://qiita.com/tmiki/items/86abc565d06ced78d968\" target=\"_blank\" rel=\"noopener noreferrer\">Babel の presets を設定する 2 つの方法</a>)</p>\n<ul>\n<li><code class=\"language-text\">webpack.config.js</code>に書く場合は<code class=\"language-text\">options</code>で指定する</li>\n<li><code class=\"language-text\">.babelrc</code> (not <code class=\"language-text\">babel.config.js</code>)に書く(こちらの方が複数の対象について 1 つで済むため良さそう)</li>\n</ul>\n</li>\n<li><code class=\"language-text\">webpack.config.js</code>をトランスパイルしたい場合は、<code class=\"language-text\">$ npm install --save-dev @babel/register</code>して、<code class=\"language-text\">webpack.config.js</code>を<code class=\"language-text\">webpack.config.babel.js</code>に変える</li>\n</ul>\n<h2 id=\"react--redux\" style=\"position:relative;\"><a href=\"#react--redux\" aria-label=\"react  redux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React + Redux</h2>\n<ul>\n<li><code class=\"language-text\">$ npm --save install react react-dom redux react-redux</code></li>\n<li><a href=\"https://qiita.com/erukiti/items/e16aa13ad81d5938374e\" target=\"_blank\" rel=\"noopener noreferrer\">React+Redux 入門</a></li>\n<li><a href=\"https://redux.js.org/basics/example\" target=\"_blank\" rel=\"noopener noreferrer\">Example: Todo List</a></li>\n<li>Redux で非同期処理がしたい場合は Redux Middleware を使う</li>\n</ul>","fields":{"slug":"/articles/web-programming","tagSlugs":null},"frontmatter":{"date":null,"description":"フロントエンド技術のまとめ場所。","tags":null,"title":"Web プログラミング(フロントエンド)覚書"}}},"pageContext":{"slug":"/articles/web-programming"}}}