{"componentChunkName":"component---src-templates-post-template-js","path":"/articles/competitive-programming-cpp-template","result":{"data":{"markdownRemark":{"id":"2e53bb93-330c-5497-98e7-87a0811f3fcb","html":"<h2 id=\"目次\" style=\"position:relative;\"><a href=\"#%E7%9B%AE%E6%AC%A1\" aria-label=\"目次 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>目次</h2>\n<div class=\"toc\">\n<ul>\n<li>\n<p><a href=\"#%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9\">リファレンス</a></p>\n<ul>\n<li><a href=\"#%E5%9E%8B%E3%83%BB%E3%83%9E%E3%82%AF%E3%83%AD\">型・マクロ</a></li>\n<li><a href=\"#%E6%95%B0%E5%80%A4\">数値</a></li>\n<li><a href=\"#%E3%83%93%E3%83%83%E3%83%88%E6%BC%94%E7%AE%97\">ビット演算</a></li>\n<li><a href=\"#%E6%96%87%E5%AD%97%E5%88%97-string\">文字列 <code class=\"language-text\">string</code></a></li>\n<li><a href=\"#%E5%8B%95%E7%9A%84%E9%85%8D%E5%88%97-vector\">動的配列 <code class=\"language-text\">vector</code></a></li>\n<li><a href=\"#%E5%8F%8C%E6%96%B9%E5%90%91%E5%8B%95%E7%9A%84%E9%85%8D%E5%88%97-deque\">双方向動的配列 <code class=\"language-text\">deque</code></a></li>\n<li><a href=\"#%E9%9B%86%E5%90%88%E3%83%BB%E9%80%A3%E6%83%B3%E9%85%8D%E5%88%97\">集合・連想配列</a></li>\n<li><a href=\"#%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E3%83%BB%E3%82%AD%E3%83%A5%E3%83%BC%E3%83%BB%E3%83%92%E3%83%BC%E3%83%97\">スタック・キュー・ヒープ</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E3%82%B3%E3%83%BC%E3%83%89%E3%82%B9%E3%83%8B%E3%83%9A%E3%83%83%E3%83%88\">コードスニペット</a></p>\n<ul>\n<li><a href=\"#%E7%B4%A0%E6%95%B0%E3%83%BB%E7%B4%84%E6%95%B0\">素数・約数</a></li>\n<li><a href=\"#%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%AD%E6%BC%94%E7%AE%97%E3%83%BB%E7%B5%84%E3%81%BF%E5%90%88%E3%82%8F%E3%81%9B\">モジュロ演算・組み合わせ</a></li>\n<li><a href=\"#%E9%A0%86%E5%88%97%E3%83%BB%E7%B5%84%E3%81%BF%E5%90%88%E3%82%8F%E3%81%9B%E5%88%97%E6%8C%99\">順列・組み合わせ列挙</a></li>\n<li><a href=\"#%E7%B4%AF%E7%A9%8D%E5%92%8C%E3%83%BB%E3%81%97%E3%82%83%E3%81%8F%E3%81%A8%E3%82%8A%E6%B3%95\">累積和・しゃくとり法</a></li>\n<li><a href=\"#%E3%81%9D%E3%81%AE%E4%BB%96%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0%E3%83%BB%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0\">その他データ構造・アルゴリズム</a></li>\n<li><a href=\"#%E5%8B%95%E7%9A%84%E8%A8%88%E7%94%BB%E6%B3%95\">動的計画法</a></li>\n<li><a href=\"#%E6%8E%A2%E7%B4%A2%E5%B9%B3%E9%9D%A2%E3%80%81%E3%82%B0%E3%83%A9%E3%83%95\">探索(平面、グラフ)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"リファレンス\" style=\"position:relative;\"><a href=\"#%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9\" aria-label=\"リファレンス permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>リファレンス</h2>\n<h3 id=\"型・マクロ\" style=\"position:relative;\"><a href=\"#%E5%9E%8B%E3%83%BB%E3%83%9E%E3%82%AF%E3%83%AD\" aria-label=\"型・マクロ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>型・マクロ</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> LL <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">using</span> PII <span class=\"token operator\">=</span> pair<span class=\"token operator\">&lt;</span>LL<span class=\"token punctuation\">,</span> LL<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">using</span> VI <span class=\"token operator\">=</span> vector<span class=\"token operator\">&lt;</span>LL<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">using</span> VVI <span class=\"token operator\">=</span> vector<span class=\"token operator\">&lt;</span>VI<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> VB <span class=\"token operator\">=</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">using</span> VS <span class=\"token operator\">=</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">using</span> VP <span class=\"token operator\">=</span> vector<span class=\"token operator\">&lt;</span>PII<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> VV(T)        vector&lt;vector&lt;T>></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> PB           push_back</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> MP           make_pair</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SZ(a)        LL((a).size())</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> EACH(x, c)   for (auto x : (c))</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ALL(c)       (c).begin(), (c).end()</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> REVERSE(c)   reverse(ALL(c))</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SORT(c)      stable_sort(ALL(c))</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> RSORT(c)     stable_sort((c).rbegin(), (c).rend())</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> FOR(i, a, b) for (LL i = (a); i &lt; (b); ++i)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> REP(i, n)    FOR(i, 0, n)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> $(x)         {cout &lt;&lt; #x &lt;&lt; \" = \" &lt;&lt; (x) &lt;&lt; endl;}</span></code></pre></div>\n<h3 id=\"数値\" style=\"position:relative;\"><a href=\"#%E6%95%B0%E5%80%A4\" aria-label=\"数値 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>数値</h3>\n<table>\n<thead>\n<tr>\n<th align=\"center\">操作</th>\n<th align=\"center\">記法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">最大値・最小値</td>\n<td align=\"center\">[<code class=\"language-text\">INT</code>|<code class=\"language-text\">LLONG</code>|<code class=\"language-text\">DBL</code>]_[<code class=\"language-text\">MAX</code>|<code class=\"language-text\">MIN</code>]</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">double</code> を <code class=\"language-text\">N</code> 桁表示</td>\n<td align=\"center\"><code class=\"language-text\">cout &lt;&lt; setprecision(N) &lt;&lt; X &lt;&lt; endl;</code></td>\n</tr>\n<tr>\n<td align=\"center\">小数点以下 <code class=\"language-text\">N</code> 桁を表示</td>\n<td align=\"center\"><code class=\"language-text\">cout &lt;&lt; fixed &lt;&lt; setprecision(N) &lt;&lt; X &lt;&lt; endl;</code></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p><code class=\"language-text\">X</code> 以上の最小の <code class=\"language-text\">N</code> の倍数</p>\n<ul>\n<li>何倍か知りたいだけの場合は最初の <code class=\"language-text\">n *</code> を消す</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">inline</span> LL <span class=\"token function\">minMult</span><span class=\"token punctuation\">(</span>LL x<span class=\"token punctuation\">,</span> LL n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">/</span> n <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">%</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>10 進数を最上位桁から順に見る</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">LL N<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 対象の数値 >0</span>\nVI digits<span class=\"token punctuation\">;</span>\nLL M <span class=\"token operator\">=</span> N<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>M <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    digits<span class=\"token punctuation\">.</span><span class=\"token function\">PB</span><span class=\"token punctuation\">(</span>M <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    M <span class=\"token operator\">/=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">REVERSE</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 最下位桁からなら不要</span></code></pre></div>\n<h3 id=\"ビット演算\" style=\"position:relative;\"><a href=\"#%E3%83%93%E3%83%83%E3%83%88%E6%BC%94%E7%AE%97\" aria-label=\"ビット演算 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ビット演算</h3>\n<table>\n<thead>\n<tr>\n<th align=\"center\">操作</th>\n<th align=\"center\">記法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">bitwise AND</td>\n<td align=\"center\"><code class=\"language-text\">(x &amp; y)</code></td>\n</tr>\n<tr>\n<td align=\"center\">bitwise OR</td>\n<td align=\"center\"><code class=\"language-text\">(x \\| y)</code></td>\n</tr>\n<tr>\n<td align=\"center\">bitwise XOR</td>\n<td align=\"center\"><code class=\"language-text\">(x ^ y)</code></td>\n</tr>\n<tr>\n<td align=\"center\">bitwise NOT</td>\n<td align=\"center\"><code class=\"language-text\">(x ~ y)</code></td>\n</tr>\n<tr>\n<td align=\"center\">shift</td>\n<td align=\"center\"><code class=\"language-text\">x &lt;&lt; 1</code> ／ <code class=\"language-text\">x &gt;&gt; 1</code></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>ビット演算の優先度は <code class=\"language-text\">==</code> 等よりも低いので括弧で囲む</li>\n</ul>\n<h3 id=\"文字列-string\" style=\"position:relative;\"><a href=\"#%E6%96%87%E5%AD%97%E5%88%97-string\" aria-label=\"文字列 string permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>文字列 <code class=\"language-text\">string</code></h3>\n<table>\n<thead>\n<tr>\n<th align=\"center\">操作</th>\n<th align=\"center\">記法</th>\n<th align=\"center\">備考</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">初期化</td>\n<td align=\"center\"><code class=\"language-text\">string X(S);</code><br><code class=\"language-text\">string X(N, C);</code></td>\n<td align=\"center\">例) <code class=\"language-text\">string X(&quot;abc&quot;);</code><br>例) <code class=\"language-text\">stirng X(5, &#39;a&#39;); // &quot;aaaaa&quot;</code></td>\n</tr>\n<tr>\n<td align=\"center\">部分文字列</td>\n<td align=\"center\"><code class=\"language-text\">X.substr(i, N)</code></td>\n<td align=\"center\"><code class=\"language-text\">X[i]</code> から <code class=\"language-text\">N</code> 文字を切り出す<br>例) <code class=\"language-text\">string(&quot;abcde&quot;).substr(2, 2)</code> は <code class=\"language-text\">&quot;cd&quot;</code></td>\n</tr>\n<tr>\n<td align=\"center\">存在判定</td>\n<td align=\"center\"><code class=\"language-text\">if (X.find(S) != string::npos) { /* EXIST */ }</code></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">先頭・末尾検索</td>\n<td align=\"center\"><code class=\"language-text\">(LL)X.find(S)</code> ／ <code class=\"language-text\">(LL)X.rfind(S)</code></td>\n<td align=\"center\">返り値は先頭[末尾]のマッチの位置</td>\n</tr>\n<tr>\n<td align=\"center\">数値から変換</td>\n<td align=\"center\"><code class=\"language-text\">to_string(N)</code></td>\n<td align=\"center\"><code class=\"language-text\">double</code> の桁埋めは不可</td>\n</tr>\n<tr>\n<td align=\"center\">数値に変換</td>\n<td align=\"center\"><code class=\"language-text\">stoll(X)</code> ／ <code class=\"language-text\">stoi(X)</code> ／ <code class=\"language-text\">stod(X)</code></td>\n<td align=\"center\"><code class=\"language-text\">X</code> をバイナリ扱いする場合は <code class=\"language-text\">stoll(X, nullptr, 2)</code></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>全マッチ位置列挙</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">VI <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span>string S<span class=\"token punctuation\">,</span> string pattern<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    VI P<span class=\"token punctuation\">;</span>\n    LL pos <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LL<span class=\"token punctuation\">)</span>S<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">!=</span> string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        P<span class=\"token punctuation\">.</span><span class=\"token function\">PB</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pos <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LL<span class=\"token punctuation\">)</span>S<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span> pos <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> P<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">auto</span> P <span class=\"token operator\">=</span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcdeacac\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// P = {0, 5, 7}</span></code></pre></div>\n<h3 id=\"動的配列-vector\" style=\"position:relative;\"><a href=\"#%E5%8B%95%E7%9A%84%E9%85%8D%E5%88%97-vector\" aria-label=\"動的配列 vector permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>動的配列 <code class=\"language-text\">vector</code></h3>\n<table>\n<thead>\n<tr>\n<th align=\"center\">操作</th>\n<th align=\"center\">記法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">宣言</td>\n<td align=\"center\"><code class=\"language-text\">vector&lt;T&gt; X(N, E);</code></td>\n</tr>\n<tr>\n<td align=\"center\">二次元配列</td>\n<td align=\"center\"><code class=\"language-text\">VV(T) X(N1, VI(N2, E));</code></td>\n</tr>\n<tr>\n<td align=\"center\">最大・最小値</td>\n<td align=\"center\"><code class=\"language-text\">*max_element(ALL(X))</code> ／ <code class=\"language-text\">*min_element(ALL(X))</code></td>\n</tr>\n<tr>\n<td align=\"center\">存在判定(二分)</td>\n<td align=\"center\"><code class=\"language-text\">SORT(X);</code><br><code class=\"language-text\">if (binary_search(ALL(X), E)) { /* EXIST */ }</code></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code class=\"language-text\">vector&lt;pair&gt;</code> のソート</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> FSORT(c)     stable_sort(ALL(c), [] (auto&amp; x, auto&amp; y) {return x.first &lt; y.first;});</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> FRSORT(c)    stable_sort(ALL(c), [] (auto&amp; x, auto&amp; y) {return x.first > y.first;});</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SSORT(c)     stable_sort(ALL(c), [] (auto&amp; x, auto&amp; y) {return x.second &lt; y.second;});</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SRSORT(c)    stable_sort(ALL(c), [] (auto&amp; x, auto&amp; y) {return x.second > y.second;});</span>\n\nvector<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token operator\">>></span> X<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>F<span class=\"token operator\">|</span>S<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>R<span class=\"token punctuation\">]</span><span class=\"token function\">SORT</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// second significant を先に</span>\n<span class=\"token punctuation\">[</span>F<span class=\"token operator\">|</span>S<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>R<span class=\"token punctuation\">]</span><span class=\"token function\">SORT</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// most significant を後に</span></code></pre></div>\n<ul>\n<li>ソート前のインデックス</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Tuple</span> <span class=\"token punctuation\">{</span>\n    LL index<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// ソート前のインデックス</span>\n    LL a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// ソートしたい中身</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nvector<span class=\"token operator\">&lt;</span>Tuple<span class=\"token operator\">></span> <span class=\"token function\">X</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// ソート対象が1種類ならデータとインデックスの pair でもよい</span>\n<span class=\"token function\">REP</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    X<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Tuple<span class=\"token punctuation\">{</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 1-indexed; pair なら MP(A[i], i + 1)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">stable_sort</span><span class=\"token punctuation\">(</span><span class=\"token function\">ALL</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span>b <span class=\"token operator\">></span> y<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// least significant なものからソートしていく、pair なら F[R]SORT(X);</span>\n<span class=\"token function\">stable_sort</span><span class=\"token punctuation\">(</span><span class=\"token function\">ALL</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span>a <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">REP</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> X<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>index <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>二分探索(直近の値)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">SORT</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nLL index <span class=\"token operator\">=</span> <span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span><span class=\"token function\">ALL</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> E<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> X<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// E以上の最小値とその先頭の位置</span>\nLL index <span class=\"token operator\">=</span> <span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span><span class=\"token function\">ALL</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> E<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> X<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Eより大きい最小値とその先頭の位置</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> <span class=\"token function\">SZ</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Aにそのような要素は存在しない */</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    LL searched_val <span class=\"token operator\">=</span> X<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nLL index <span class=\"token operator\">=</span> <span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span><span class=\"token function\">ALL</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> E<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> X<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// E以下の最大値とその末尾の位置</span>\nLL index <span class=\"token operator\">=</span> <span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span><span class=\"token function\">ALL</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> E<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> X<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// E未満の最大値とその末尾の位置</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Aにそのような要素は存在しない */</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    LL searched_val <span class=\"token operator\">=</span> X<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"双方向動的配列-deque\" style=\"position:relative;\"><a href=\"#%E5%8F%8C%E6%96%B9%E5%90%91%E5%8B%95%E7%9A%84%E9%85%8D%E5%88%97-deque\" aria-label=\"双方向動的配列 deque permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>双方向動的配列 <code class=\"language-text\">deque</code></h3>\n<table>\n<thead>\n<tr>\n<th align=\"center\">操作</th>\n<th align=\"center\">記法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">宣言</td>\n<td align=\"center\"><code class=\"language-text\">deque&lt;T&gt; X(N, E);</code></td>\n</tr>\n<tr>\n<td align=\"center\">参照・代入</td>\n<td align=\"center\"><code class=\"language-text\">X[i] = x;</code></td>\n</tr>\n<tr>\n<td align=\"center\">先頭・末尾参照</td>\n<td align=\"center\"><code class=\"language-text\">X.front()</code> ／ <code class=\"language-text\">X.back()</code></td>\n</tr>\n<tr>\n<td align=\"center\">先頭・末尾追加</td>\n<td align=\"center\"><code class=\"language-text\">X.push_front(x);</code> ／ <code class=\"language-text\">X.push_back(x);</code></td>\n</tr>\n<tr>\n<td align=\"center\">先頭・末尾削除</td>\n<td align=\"center\"><code class=\"language-text\">X.pop_front();</code> ／ <code class=\"language-text\">X.pop_back();</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"集合・連想配列\" style=\"position:relative;\"><a href=\"#%E9%9B%86%E5%90%88%E3%83%BB%E9%80%A3%E6%83%B3%E9%85%8D%E5%88%97\" aria-label=\"集合・連想配列 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>集合・連想配列</h3>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">集合</th>\n<th align=\"center\">連想配列</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">宣言(二分探索木)</td>\n<td align=\"center\"><code class=\"language-text\">set&lt;T&gt; X;</code></td>\n<td align=\"center\"><code class=\"language-text\">map&lt;T_key, T_val&gt; X;</code></td>\n</tr>\n<tr>\n<td align=\"center\">宣言(hash)</td>\n<td align=\"center\"><code class=\"language-text\">unordered_set&lt;T&gt; X;</code></td>\n<td align=\"center\"><code class=\"language-text\">unordered_map&lt;T_key, T_val&gt; X;</code></td>\n</tr>\n<tr>\n<td align=\"center\">参照</td>\n<td align=\"center\"></td>\n<td align=\"center\"><code class=\"language-text\">X[k]</code></td>\n</tr>\n<tr>\n<td align=\"center\">追加</td>\n<td align=\"center\"><code class=\"language-text\">X.insert(x);</code></td>\n<td align=\"center\"><code class=\"language-text\">X[k] = v;</code></td>\n</tr>\n<tr>\n<td align=\"center\">削除</td>\n<td align=\"center\"><code class=\"language-text\">X.erase(x);</code></td>\n<td align=\"center\"><code class=\"language-text\">X.erase(k);</code></td>\n</tr>\n<tr>\n<td align=\"center\">最小値・最大値(二分探索木)</td>\n<td align=\"center\"><code class=\"language-text\">*X.begin() ／ *X.end()</code></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">存在判定</td>\n<td align=\"center\"><code class=\"language-text\">if (X.count(x) != 0) { /* EXIST */ }</code></td>\n<td align=\"center\"><code class=\"language-text\">if (X.count(k) != 0) { /* EXIST */ }</code></td>\n</tr>\n<tr>\n<td align=\"center\">iteration</td>\n<td align=\"center\"><code class=\"language-text\">EACH(x, X) { x }</code></td>\n<td align=\"center\"><code class=\"language-text\">EACH(x, X) { x.first, x.second }</code></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code class=\"language-text\">set&lt;PII&gt;</code>は OK だが<code class=\"language-text\">unordered_set&lt;PII&gt;</code>は NG</li>\n</ul>\n<h3 id=\"スタック・キュー・ヒープ\" style=\"position:relative;\"><a href=\"#%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E3%83%BB%E3%82%AD%E3%83%A5%E3%83%BC%E3%83%BB%E3%83%92%E3%83%BC%E3%83%97\" aria-label=\"スタック・キュー・ヒープ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>スタック・キュー・ヒープ</h3>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">スタック</th>\n<th align=\"center\">キュー</th>\n<th align=\"center\">ヒープ</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">宣言</td>\n<td align=\"center\"><code class=\"language-text\">stack&lt;T&gt; X;</code></td>\n<td align=\"center\"><code class=\"language-text\">queue&lt;T&gt; X;</code></td>\n<td align=\"center\">最大値) <code class=\"language-text\">priority_queue&lt;T&gt; X;</code><br>最小値) <code class=\"language-text\">priority_queue&lt;T, vector&lt;T&gt;, greater&lt;T&gt;&gt; X;</code></td>\n</tr>\n<tr>\n<td align=\"center\">追加</td>\n<td align=\"center\"><code class=\"language-text\">X.push(x);</code></td>\n<td align=\"center\"><code class=\"language-text\">X.push(x);</code></td>\n<td align=\"center\"><code class=\"language-text\">X.push(x);</code></td>\n</tr>\n<tr>\n<td align=\"center\">先頭削除</td>\n<td align=\"center\"><code class=\"language-text\">X.pop();</code></td>\n<td align=\"center\"><code class=\"language-text\">X.pop();</code></td>\n<td align=\"center\"><code class=\"language-text\">X.pop();</code></td>\n</tr>\n<tr>\n<td align=\"center\">先頭参照</td>\n<td align=\"center\"><code class=\"language-text\">X.top()</code></td>\n<td align=\"center\"><code class=\"language-text\">X.front()</code></td>\n<td align=\"center\"><code class=\"language-text\">X.top()</code></td>\n</tr>\n<tr>\n<td align=\"center\">iteration</td>\n<td align=\"center\"><code class=\"language-text\">while (!X.empty()) { auto x = X.top(); X.pop(); }</code></td>\n<td align=\"center\"><code class=\"language-text\">while (!X.empty()) { auto x = X.front(); X.pop(); }</code></td>\n<td align=\"center\"><code class=\"language-text\">while (!X.empty()) { auto x = X.top(); X.pop(); }</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"コードスニペット\" style=\"position:relative;\"><a href=\"#%E3%82%B3%E3%83%BC%E3%83%89%E3%82%B9%E3%83%8B%E3%83%9A%E3%83%83%E3%83%88\" aria-label=\"コードスニペット permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>コードスニペット</h2>\n<h3 id=\"素数・約数\" style=\"position:relative;\"><a href=\"#%E7%B4%A0%E6%95%B0%E3%83%BB%E7%B4%84%E6%95%B0\" aria-label=\"素数・約数 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>素数・約数</h3>\n<ul>\n<li>最大公約数 GCD・最小公倍数 LCM</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">inline</span> LL <span class=\"token function\">lcm</span><span class=\"token punctuation\">(</span>LL a<span class=\"token punctuation\">,</span> LL b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b <span class=\"token operator\">/</span> <span class=\"token function\">__gcd</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>素数判定</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span>LL n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">FOR</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>ある数以下の全素数を列挙</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eratosthenes</span><span class=\"token punctuation\">(</span>VB<span class=\"token operator\">&amp;</span> primes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">REP</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token function\">SZ</span><span class=\"token punctuation\">(</span>primes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> primes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    primes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> primes<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">REP</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token function\">SZ</span><span class=\"token punctuation\">(</span>primes<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>primes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>LL j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token function\">SZ</span><span class=\"token punctuation\">(</span>primes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                primes<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nLL N <span class=\"token operator\">=</span> <span class=\"token comment\">/*最大値*/</span><span class=\"token punctuation\">;</span>\nVB <span class=\"token function\">primes</span><span class=\"token punctuation\">(</span>N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">eratosthenes</span><span class=\"token punctuation\">(</span>primes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">REP</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>primes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* i は素数 */</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>約数列挙</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">set<span class=\"token operator\">&lt;</span>LL<span class=\"token operator\">></span> <span class=\"token function\">listDivisors</span><span class=\"token punctuation\">(</span>LL n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// set版</span>\n    set<span class=\"token operator\">&lt;</span>LL<span class=\"token operator\">></span> divs<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">FOR</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// {1, n} を除く場合は2番目の引数を 2 にする</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            divs<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            divs<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> divs<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nVI <span class=\"token function\">listDivisors</span><span class=\"token punctuation\">(</span>LL n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// vector版</span>\n    VI divs<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">FOR</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// {1, n} を除く場合は2番目の引数を 2 にする</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            divs<span class=\"token punctuation\">.</span><span class=\"token function\">PB</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            divs<span class=\"token punctuation\">.</span><span class=\"token function\">PB</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">SORT</span><span class=\"token punctuation\">(</span>divs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> divs<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">auto</span> divs <span class=\"token operator\">=</span> <span class=\"token function\">listDivisors</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">EACH</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">,</span> divs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* div は約数 */</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>素因数分解(これらの素因数の、階乗数を制約条件とした組み合わせによって全ての約数が決まる)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">map<span class=\"token operator\">&lt;</span>LL<span class=\"token punctuation\">,</span> LL<span class=\"token operator\">></span> <span class=\"token function\">factorize</span><span class=\"token punctuation\">(</span>LL n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    map<span class=\"token operator\">&lt;</span>LL<span class=\"token punctuation\">,</span> LL<span class=\"token operator\">></span> prime_factors<span class=\"token punctuation\">;</span>\n    LL m <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">FOR</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 全て割り切った</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            prime_factors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            m <span class=\"token operator\">/=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// 残りの素因数(必ず1つの素数となる)</span>\n        prime_factors<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> prime_factors<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nmap<span class=\"token operator\">&lt;</span>LL<span class=\"token punctuation\">,</span> LL<span class=\"token operator\">></span> pfs <span class=\"token operator\">=</span> <span class=\"token function\">factorize</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> pf <span class=\"token operator\">:</span> pfs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* pf.first が素因数、pf.second が階乗数 */</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"モジュロ演算・組み合わせ\" style=\"position:relative;\"><a href=\"#%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%AD%E6%BC%94%E7%AE%97%E3%83%BB%E7%B5%84%E3%81%BF%E5%90%88%E3%82%8F%E3%81%9B\" aria-label=\"モジュロ演算・組み合わせ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>モジュロ演算・組み合わせ</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> LL MOD <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">inline</span> LL <span class=\"token function\">mod_add</span><span class=\"token punctuation\">(</span>LL a<span class=\"token punctuation\">,</span> LL b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> LL <span class=\"token function\">mod_sub</span><span class=\"token punctuation\">(</span>LL a<span class=\"token punctuation\">,</span> LL b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> MOD <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> LL <span class=\"token function\">mod_mul</span><span class=\"token punctuation\">(</span>LL a<span class=\"token punctuation\">,</span> LL b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">%</span> MOD<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">%</span> MOD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\nLL <span class=\"token function\">mod_bipow</span><span class=\"token punctuation\">(</span>LL x<span class=\"token punctuation\">,</span> LL y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// x^y by bisection method</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">%</span> MOD<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        LL val <span class=\"token operator\">=</span> <span class=\"token function\">mod_bipow</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">mod_mul</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        LL val <span class=\"token operator\">=</span> <span class=\"token function\">mod_bipow</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">mod_mul</span><span class=\"token punctuation\">(</span><span class=\"token function\">mod_mul</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nLL <span class=\"token function\">mod_inv</span><span class=\"token punctuation\">(</span>LL x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">mod_bipow</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> MOD <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>   <span class=\"token comment\">// x^{-1} = x^{MOD-2} (MOD: prime number)</span>\nLL <span class=\"token function\">mod_div</span><span class=\"token punctuation\">(</span>LL a<span class=\"token punctuation\">,</span> LL b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">mod_mul</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token function\">mod_inv</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>   <span class=\"token comment\">// a/b = a*b^{-1}</span></code></pre></div>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mi>n</mi></msub><msub><mi>C</mi><mi>r</mi></msub><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy=\"false\">!</mo></mrow><mrow><mi>r</mi><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>r</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo></mrow></mfrac><mo>=</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mo>×</mo><mo stretchy=\"false\">(</mo><mi>r</mi><mo stretchy=\"false\">!</mo><msup><mo stretchy=\"false\">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>×</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>r</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo><msup><mo stretchy=\"false\">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">_nC_r=\\frac{n!}{r!(n-r)!}=n!\\times (r!)^{-1}\\times ((n-r)!)^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.400108em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801079999999999em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose mtight\">!</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose mtight\">)</span><span class=\"mclose mtight\">!</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mclose mtight\">!</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">!</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">!</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span><span class=\"mclose\">!</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> は、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">!</mo></mrow><annotation encoding=\"application/x-tex\">k!</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">!</span></span></span></span> および <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">!</mo><msup><mo stretchy=\"false\">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>k</mi><mo>=</mo><mn>0</mn><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(k!)^{-1}\\ (k=0,\\cdots,n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">!</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> を計算しておく (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mo>∼</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">n\\leq\\sim 10^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span>)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Combination</span> <span class=\"token punctuation\">{</span>\n    VI facts<span class=\"token punctuation\">,</span> inv_facts<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Combination</span><span class=\"token punctuation\">(</span>LL N<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">facts</span><span class=\"token punctuation\">(</span>N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">inv_facts</span><span class=\"token punctuation\">(</span>N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">REP</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> facts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token function\">mod_mul</span><span class=\"token punctuation\">(</span>facts<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>LL i <span class=\"token operator\">=</span> N<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> inv_facts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">==</span> N <span class=\"token operator\">?</span> <span class=\"token function\">mod_inv</span><span class=\"token punctuation\">(</span>facts<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">mod_mul</span><span class=\"token punctuation\">(</span>inv_facts<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// (i!)^{-1}=((i+1)!)^{-1}*(i+1)</span>\n    <span class=\"token punctuation\">}</span>\n    LL <span class=\"token function\">nCr</span><span class=\"token punctuation\">(</span>LL n<span class=\"token punctuation\">,</span> LL r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">mod_mul</span><span class=\"token punctuation\">(</span>facts<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mod_mul</span><span class=\"token punctuation\">(</span>inv_facts<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> inv_facts<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nCombination <span class=\"token function\">c</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// N は n の最大値</span>\nLL ncr <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">nCr</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"順列・組み合わせ列挙\" style=\"position:relative;\"><a href=\"#%E9%A0%86%E5%88%97%E3%83%BB%E7%B5%84%E3%81%BF%E5%90%88%E3%82%8F%E3%81%9B%E5%88%97%E6%8C%99\" aria-label=\"順列・組み合わせ列挙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>順列・組み合わせ列挙</h3>\n<ul>\n<li>順列列挙</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">VI X<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// これらを並び替える</span>\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// この中で X は並び替えられており、普通の配列のように使うことができる</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">next_permutation</span><span class=\"token punctuation\">(</span><span class=\"token function\">ALL</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 抜けたら X は元の並びに直っている</span></code></pre></div>\n<ul>\n<li>重複順列列挙 (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span> 個の要素から重複を無制限に許して長さ <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span> の順列を全て生成; <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mi>M</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^M)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">char</span> elements<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// これらから抽出</span>\n<span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> M<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> string S<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Sが求める順列の1つ(を表す文字列)となる、ここで順列が満たすべき制約でフィルター</span>\n        <span class=\"token comment\">//cout &lt;&lt; S &lt;&lt; endl;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> S <span class=\"token operator\">+</span> elements<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>組み合わせ列挙 (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span> 個の要素からの全抽出方法)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">REP</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> N<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// i moves from 0...0 to 1...1 as binary (|i|=N), which indicates choice/no-choice of each element</span>\n    <span class=\"token function\">REP</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// for each element index</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LL<span class=\"token punctuation\">)</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// element k is selected in this choice</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>重複組み合わせ列挙 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mi>n</mi></msub><msub><mi>H</mi><mi>r</mi></msub><msub><mo>=</mo><mrow><mi>n</mi><mo>+</mo><mi>r</mi><mo>−</mo><mn>1</mn></mrow></msub><msub><mi>C</mi><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">_nH_r=_{n+r-1}C_{r}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">=</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">char</span> elements<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// これらから抽出</span>\n<span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> M<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 何個選ぶか</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> string S<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Sが求める組み合わせの1つ(を表す文字列)となる、ここで順列が満たすべき制約でフィルター</span>\n        <span class=\"token comment\">//cout &lt;&lt; S &lt;&lt; endl;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> S <span class=\"token operator\">+</span> elements<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// ここが順列と違う</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>組み合わせで <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span></span></span></span> 回全部選ばなくても良い場合は、選ばないという選択肢を増やした <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">N+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 個の要素からの <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span></span></span></span> 個の組み合わせを計算する</li>\n<li>TODO: 組み合わせ公式</li>\n</ul>\n<h3 id=\"累積和・しゃくとり法\" style=\"position:relative;\"><a href=\"#%E7%B4%AF%E7%A9%8D%E5%92%8C%E3%83%BB%E3%81%97%E3%82%83%E3%81%8F%E3%81%A8%E3%82%8A%E6%B3%95\" aria-label=\"累積和・しゃくとり法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>累積和・しゃくとり法</h3>\n<ul>\n<li>連続部分列の要素の総和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>S</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>S</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">S[l,r]=S[1,r]-S[1,l-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">VI X<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Xが0-indexedなら</span>\nVI <span class=\"token function\">S</span><span class=\"token punctuation\">(</span><span class=\"token function\">SZ</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">REP</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token function\">SZ</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> S<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> X<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">auto</span> sum_of_l_to_r <span class=\"token operator\">=</span> S<span class=\"token punctuation\">[</span>r <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> S<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Xが1-indexedなら</span>\nVI <span class=\"token function\">S</span><span class=\"token punctuation\">(</span><span class=\"token function\">SZ</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">FOR</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SZ</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> S<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> X<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">auto</span> sum_of_l_to_r <span class=\"token operator\">=</span> S<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> S<span class=\"token punctuation\">[</span>l <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>二次元累積和</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"></code></pre></div>\n<ul>\n<li>しゃくとり法(条件を満たす連続部分列の列挙)</li>\n<li>TODO: 一般化</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">VI <span class=\"token function\">X</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nLL right <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//LL sum = 0;   // 部分列の和を扱う場合</span>\n<span class=\"token function\">REP</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;</span> N <span class=\"token operator\">&amp;&amp;</span> <span class=\"token comment\">/* 求めたい連続部分列が条件を満たしていない */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* right を1つ進める */</span>\n        <span class=\"token comment\">//sum += X[right];   // 部分列の和を扱う場合</span>\n        <span class=\"token operator\">++</span>right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* この時点での連続部分列が条件を満たしていない */</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// right == N で条件を満たせないなら今後満たせることはない場合</span>\n\n    <span class=\"token comment\">/* X[left:right) は条件を満たす(leftを固定した時に最短の)連続部分列なので、ここで何かする */</span>\n\n    <span class=\"token comment\">/* left を1つ進める準備 */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">==</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span>right<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//else sum -= a[left];   // 部分列の和を扱う場合</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"その他データ構造・アルゴリズム\" style=\"position:relative;\"><a href=\"#%E3%81%9D%E3%81%AE%E4%BB%96%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0%E3%83%BB%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0\" aria-label=\"その他データ構造・アルゴリズム permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>その他データ構造・アルゴリズム</h3>\n<ul>\n<li>Union-Find (同値関係の追加と検索; 無向グラフの連結成分)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">UnionFind</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    VI parent<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">UnionFind</span><span class=\"token punctuation\">(</span>LL N<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">parent</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">iota</span><span class=\"token punctuation\">(</span><span class=\"token function\">ALL</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 初期化(親==自分)</span>\n    <span class=\"token punctuation\">}</span>\n    LL <span class=\"token function\">getRoot</span><span class=\"token punctuation\">(</span>LL x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// 根に到達するまで親を辿る</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 根は親==自分</span>\n        <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">getRoot</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 経路圧縮(辿った要素を全て根に直結させる)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">inSameSet</span><span class=\"token punctuation\">(</span>LL x<span class=\"token punctuation\">,</span> LL y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// 根が同じなら同じ集合に属する</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getRoot</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">getRoot</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">unite</span><span class=\"token punctuation\">(</span>LL x<span class=\"token punctuation\">,</span> LL y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// 同値関係 x~y を追加(xが属する集合とyが属する集合をマージ)</span>\n        x <span class=\"token operator\">=</span> <span class=\"token function\">getRoot</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        y <span class=\"token operator\">=</span> <span class=\"token function\">getRoot</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// すでに同じ集合</span>\n        parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nUnionFind <span class=\"token function\">uf</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// N は要素数、1-indexの場合は N + 1 にする</span>\n<span class=\"token function\">EACH</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">:</span> pairs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    uf<span class=\"token punctuation\">.</span><span class=\"token function\">unite</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// マージ</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">REP</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// 1-indexの場合は FOR(i, 1, N + 1) にする</span>\n    <span class=\"token comment\">/* uf.getRoot(i) が i の属する集合の根 */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 無向グラフの連結成分</span>\nmap<span class=\"token operator\">&lt;</span>LL<span class=\"token punctuation\">,</span> set<span class=\"token operator\">&lt;</span>LL<span class=\"token operator\">>></span> ccs<span class=\"token punctuation\">;</span>\n<span class=\"token function\">REP</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// 1-indexの場合は FOR(i, 1, N + 1) にする</span>\n  ccs<span class=\"token punctuation\">[</span>uf<span class=\"token punctuation\">.</span><span class=\"token function\">getRoot</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>区間の集合と(多数の)座標が与えられた時の区間所属判定</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">vector<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span>LL<span class=\"token punctuation\">,</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">,</span> LL<span class=\"token operator\">>></span><span class=\"token operator\">></span> events<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 座標、区間開始(true)・終了(false)フラグ、値(区間のラベルなど)</span>\n<span class=\"token function\">REP</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  LL s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">;</span>\n  cin <span class=\"token operator\">>></span> s <span class=\"token operator\">>></span> t <span class=\"token operator\">>></span> x<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 区間 [s, t) と任意の値 x、ここでは t が exclusive であることに注意</span>\n  events<span class=\"token punctuation\">.</span><span class=\"token function\">PB</span><span class=\"token punctuation\">(</span><span class=\"token function\">MP</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token function\">MP</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  events<span class=\"token punctuation\">.</span><span class=\"token function\">PB</span><span class=\"token punctuation\">(</span><span class=\"token function\">MP</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> <span class=\"token function\">MP</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// t が inclusive の場合は t + 1 とする</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">FSORT</span><span class=\"token punctuation\">(</span>events<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 区間の座標だけで</span>\n\nVI D<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 所属を判定したい座標たち</span>\nLL q_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nset<span class=\"token operator\">&lt;</span>LL<span class=\"token operator\">></span> curr_val<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 同じvalをもつ複数の区間は重ならないとする(重なる場合はmultiset？)</span>\n<span class=\"token function\">EACH</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> events<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">auto</span> coord <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">auto</span> start <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">auto</span> val <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q_index <span class=\"token operator\">&lt;</span> <span class=\"token function\">SZ</span><span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> D<span class=\"token punctuation\">[</span>q_index<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> coord<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    q_index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">SZ</span><span class=\"token punctuation\">(</span>curr_val<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/* 座標 D[q_index] はどの区間にも属していない */</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/* *curr_val.begin() */</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span> curr_val<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> curr_val<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q_index <span class=\"token operator\">&lt;</span> <span class=\"token function\">SZ</span><span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  q_index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* どの区間にも属していない */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"動的計画法\" style=\"position:relative;\"><a href=\"#%E5%8B%95%E7%9A%84%E8%A8%88%E7%94%BB%E6%B3%95\" aria-label=\"動的計画法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>動的計画法</h3>\n<ul>\n<li>メモ化再帰</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">LL <span class=\"token function\">memo_rec</span><span class=\"token punctuation\">(</span>LL i<span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span> C<span class=\"token punctuation\">,</span> VI<span class=\"token operator\">&amp;</span> dp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> 初期値<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    LL val <span class=\"token operator\">=</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token function\">EACH</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        val <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> <span class=\"token function\">memo_rec</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> などで再帰をばらまく<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">REP</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span> <span class=\"token function\">memo_rec</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p>ナップサック問題 (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span> 個のものから合計コスト <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span></span></span></span> 以下で価値和最大となるように選ぶ)</p>\n<ul>\n<li>「<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span> 個のうち <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 個をそれぞれ <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>B</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">B_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 個にできる」場合は <code class=\"language-text\">weight</code>=<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>、<code class=\"language-text\">value</code>=<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>B</mi><mi>i</mi></msub><mo>−</mo><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">B_i-A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>として <code class=\"language-text\">N += knapsack(I, N, weight, value)</code> で最大個数にできる (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span></span></span></span> は <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span></span></span></span> の数)</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">LL <span class=\"token function\">knapsack</span><span class=\"token punctuation\">(</span>LL N<span class=\"token punctuation\">,</span> LL W<span class=\"token punctuation\">,</span> VI<span class=\"token operator\">&amp;</span> weight<span class=\"token punctuation\">,</span> VI<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// weight と value は 1-indexed</span>\n    VVI <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">VI</span><span class=\"token punctuation\">(</span>W <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// dp[i][j] = i番目の要素までを使い、合計容量j以下での価値の和の最大値</span>\n    <span class=\"token function\">FOR</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">REP</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> W <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 要素iを入れない</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 要素iを入れる、0-1ナップサック</span>\n            <span class=\"token comment\">//if (j - weight[i] >= 0) dp[i][j] = max(dp[i][j], dp[i][j - weight[i]] + value[i]);   // 要素iを入れる、個数制限無しナップサック</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>W<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"探索平面、グラフ\" style=\"position:relative;\"><a href=\"#%E6%8E%A2%E7%B4%A2%E5%B9%B3%E9%9D%A2%E3%80%81%E3%82%B0%E3%83%A9%E3%83%95\" aria-label=\"探索平面、グラフ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>探索(平面、グラフ)</h3>\n<ul>\n<li>二次元平面の探索(DFS; 上下移動)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">VP moves<span class=\"token punctuation\">{</span><span class=\"token function\">MP</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">MP</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">MP</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">MP</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>LL i<span class=\"token punctuation\">,</span> LL j<span class=\"token punctuation\">,</span> LL<span class=\"token operator\">&amp;</span> H<span class=\"token punctuation\">,</span> LL<span class=\"token operator\">&amp;</span> W<span class=\"token punctuation\">,</span> <span class=\"token function\">VV</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span> X<span class=\"token punctuation\">,</span> <span class=\"token function\">VV</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span> visited<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token comment\">/* 探索路に関する追加の制約 */</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> move <span class=\"token operator\">:</span> moves<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">auto</span> next_i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> move<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> next_j <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> move<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> next_i <span class=\"token operator\">&amp;&amp;</span> next_i <span class=\"token operator\">&lt;</span> H <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> next_j <span class=\"token operator\">&amp;&amp;</span> next_j <span class=\"token operator\">&lt;</span> W<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>next_i<span class=\"token punctuation\">,</span> next_j<span class=\"token punctuation\">,</span> H<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">VV</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> X<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 平面のデータ</span>\n<span class=\"token function\">VV</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token function\">visited</span><span class=\"token punctuation\">(</span>H<span class=\"token punctuation\">,</span> <span class=\"token function\">VB</span><span class=\"token punctuation\">(</span>W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">REP</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> H<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">REP</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* 探索開始点の条件 */</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> H<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>二次元平面の探索(BFS; 上下移動)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span> LL x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// d はマンハッタン距離</span>\nvector<span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">></span> moves<span class=\"token punctuation\">{</span>Point<span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Point<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Point<span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Point<span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 第3引数はダミー</span>\n\nVVI <span class=\"token function\">X</span><span class=\"token punctuation\">(</span>H<span class=\"token punctuation\">,</span> <span class=\"token function\">VI</span><span class=\"token punctuation\">(</span>W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// or VS X(H); 平面(H, W)の状態; visited と役割が被るなら無くても良い</span>\nvector<span class=\"token operator\">&lt;</span>VB<span class=\"token operator\">></span> <span class=\"token function\">visited</span><span class=\"token punctuation\">(</span>H<span class=\"token punctuation\">,</span> <span class=\"token function\">VB</span><span class=\"token punctuation\">(</span>W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nqueue<span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span>\nq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>Point<span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 探索開始点の距離を0とする</span>\n<span class=\"token comment\">//LL max_d = 0;   // 探索開始点からの最大マンハッタン距離を求める場合</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Point p <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> p<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;</span> H <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> p<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&lt;</span> W <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        visited<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//max_d = p.d;</span>\n        <span class=\"token function\">EACH</span><span class=\"token punctuation\">(</span>move<span class=\"token punctuation\">,</span> moves<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>Point<span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> move<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> move<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>d <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>二次元平面の探索(BFS; 任意の移動)</li>\n<li>グラフ(全て 1-indexed)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/* エッジに注目しない場合は隣接リスト */</span>\nLL N<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// ノード数</span>\nVVI <span class=\"token function\">G</span><span class=\"token punctuation\">(</span>N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nG<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">PB</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// エッジ x -> y を追加</span>\nG<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">PB</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 無向グラフの場合はこれも</span>\nVB <span class=\"token function\">visited</span><span class=\"token punctuation\">(</span>N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// ノードの属性、ソートするならペアや構造体もあり</span>\n\n<span class=\"token comment\">/* 隣接リストでエッジに属性を乗せたい場合 [ダイクストラなど] */</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span> <span class=\"token punctuation\">{</span> LL to<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>Edge<span class=\"token operator\">>></span> <span class=\"token function\">G</span><span class=\"token punctuation\">(</span>N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nG<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">PB</span><span class=\"token punctuation\">(</span>Edge<span class=\"token punctuation\">{</span>y<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// エッジ x -> y を追加</span>\nG<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">PB</span><span class=\"token punctuation\">(</span>Edge<span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 無向グラフの場合はこれも</span>\n\n<span class=\"token comment\">/* エッジの属性だけに注目したい場合は隣接行列 [ワーシャルフロイドなど] */</span>\nVVI <span class=\"token function\">G</span><span class=\"token punctuation\">(</span>N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">VI</span><span class=\"token punctuation\">(</span>N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nG<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> G<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 無向グラフ</span>\n\n<span class=\"token comment\">/* エッジをソートしたりする場合 [クラスカルなど] */</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span> <span class=\"token punctuation\">{</span> LL from<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 検索したい場合は map&lt;PII, LL> とか？ (unordered_map はダメ)</span>\nvector<span class=\"token operator\">&lt;</span>Edge<span class=\"token operator\">></span> edges<span class=\"token punctuation\">;</span>\nedges<span class=\"token punctuation\">.</span><span class=\"token function\">PB</span><span class=\"token punctuation\">(</span>Edge<span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nedges<span class=\"token punctuation\">.</span><span class=\"token function\">PB</span><span class=\"token punctuation\">(</span>Edge<span class=\"token punctuation\">{</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 有向グラフなら消す、無向グラフでもエッジを同値関係として扱う場合も消す</span>\n<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token function\">ALL</span><span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>グラフの DFS</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>LL v<span class=\"token punctuation\">,</span> VVI<span class=\"token operator\">&amp;</span> G<span class=\"token punctuation\">,</span> VB<span class=\"token operator\">&amp;</span> visited<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// 返り値などは適宜変える</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// すでに訪問済み</span>\n    visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* 行きがけの処理はここ */</span>\n    <span class=\"token function\">EACH</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> G<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> G<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/* 帰りがけの処理はここ [トポロジカルソートなど] */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">FOR</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> G<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>トポロジカルソート(DFS)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>LL v<span class=\"token punctuation\">,</span> VVI<span class=\"token operator\">&amp;</span> G<span class=\"token punctuation\">,</span> VB<span class=\"token operator\">&amp;</span> visited<span class=\"token punctuation\">,</span> VI<span class=\"token operator\">&amp;</span> sorted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// 返り値などは適宜変える</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// すでに訪問済み</span>\n    visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* 行きがけの処理はここ */</span>\n    <span class=\"token function\">EACH</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> G<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> G<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> sorted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/* 帰りがけの処理はここ [トポロジカルソートなど] */</span>\n    sorted<span class=\"token punctuation\">.</span><span class=\"token function\">PB</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nVI sorted<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// トポロジカルソートされたノードの列</span>\n<span class=\"token function\">FOR</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> G<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> sorted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">REVERSE</span><span class=\"token punctuation\">(</span>sorted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>二部グラフの最大マッチング(DFS) [要確認]</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>LL v<span class=\"token punctuation\">,</span> VVI<span class=\"token operator\">&amp;</span> G<span class=\"token punctuation\">,</span> VB<span class=\"token operator\">&amp;</span> visited<span class=\"token punctuation\">,</span> VI<span class=\"token operator\">&amp;</span> matched<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">EACH</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> G<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// 子ノード全てに対して</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matched<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>matched<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> G<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> matched<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// 増大路を探す</span>\n            matched<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nLL N<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// ノード数</span>\nVII <span class=\"token function\">G</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 0-indexed</span>\nVB <span class=\"token function\">visited</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nVI <span class=\"token function\">matched</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// マッチ相手</span>\nLL count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// マッチングの数</span>\n<span class=\"token function\">REP</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> G<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> matched<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>グラフの BFS</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>LL s<span class=\"token punctuation\">,</span> VVI<span class=\"token operator\">&amp;</span> G<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// 返り値などは適宜変える</span>\n    VB <span class=\"token function\">visited</span><span class=\"token punctuation\">(</span><span class=\"token function\">SZ</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    queue<span class=\"token operator\">&lt;</span>LL<span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 開始点が複数ある場合は全て追加</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        LL v <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/* ノードに対する処理はここ */</span>\n            <span class=\"token function\">EACH</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> G<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">FOR</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> G<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>ダイクストラ法(1 頂点から各頂点への最小コスト; BFS)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">VI <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>LL s<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>Edge<span class=\"token operator\">>></span><span class=\"token operator\">&amp;</span> G<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    VI <span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token function\">SZ</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> LLONG_MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cost<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    priority_queue<span class=\"token operator\">&lt;</span>PII<span class=\"token punctuation\">,</span> VP<span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span>PII<span class=\"token operator\">>></span> q<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// PII = (cost_from_s, to_node)</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">MP</span><span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        LL v <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">EACH</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> G<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            LL w <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// c = cost of v -> w</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> cost<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// s -> v -> w is better than current s -> w</span>\n                cost<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cost<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span>\n                q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">MP</span><span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> cost<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 隣接リストでエッジに属性を乗せたい場合 [ダイクストラなど] */</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span> <span class=\"token punctuation\">{</span> LL to<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>Edge<span class=\"token operator\">>></span> <span class=\"token function\">G</span><span class=\"token punctuation\">(</span>N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nG<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">PB</span><span class=\"token punctuation\">(</span>Edge<span class=\"token punctuation\">{</span>y<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// エッジ x -> y を追加</span>\nG<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">PB</span><span class=\"token punctuation\">(</span>Edge<span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 無向グラフの場合はこれも</span>\n\nVI <span class=\"token function\">cost</span><span class=\"token punctuation\">(</span>N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> LLONG_MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// LLONG_MAX はできれば別の最大値にしたい(全コストの和とか)</span>\n<span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> G<span class=\"token punctuation\">,</span> cost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nLL min_cost_v_to_w <span class=\"token operator\">=</span> cost<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>A*アルゴリズム(優先度付き BFS、常に heuristic distance <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\leq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span></span></span></span> true distance なら最適解が求まる) <a href=\"/posts/search-2d-space\">別記事</a></li>\n<li>ワーシャルフロイド法(各頂点から各頂点への最小コストと最短経路)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">VVI <span class=\"token function\">c</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> <span class=\"token function\">VI</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// c[i][j] = エッジ i->j のコスト</span>\nVVI <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> <span class=\"token function\">VI</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 経路用; next[i][j] = ノードiからjへ向かう最短経路のiの次のノード</span>\n<span class=\"token function\">REP</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span> <span class=\"token function\">REP</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span> <span class=\"token function\">REP</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>クラスカル法(最小全域木; 無向グラフ)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">LL <span class=\"token function\">kruskal</span><span class=\"token punctuation\">(</span>LL N<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>Edge<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// N はノードの数(1-indexed なら N + 1 でよい)</span>\n    UnionFind <span class=\"token function\">uf</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token function\">ALL</span><span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    LL weight_sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">EACH</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>uf<span class=\"token punctuation\">.</span><span class=\"token function\">inSameSet</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            uf<span class=\"token punctuation\">.</span><span class=\"token function\">unite</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            weight_sum <span class=\"token operator\">+=</span> e<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> weight_sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Edge</span> <span class=\"token punctuation\">{</span> LL from<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span>Edge<span class=\"token operator\">></span> edges<span class=\"token punctuation\">;</span>\nedges<span class=\"token punctuation\">.</span><span class=\"token function\">PB</span><span class=\"token punctuation\">(</span>Edge<span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nLL min_weight_sum <span class=\"token operator\">=</span> <span class=\"token function\">kruskal</span><span class=\"token punctuation\">(</span>N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","fields":{"slug":"/articles/competitive-programming-cpp-template","tagSlugs":null},"frontmatter":{"date":null,"description":"マクロやコード片やアルゴリズムなど。","tags":null,"title":"C++ 競技プログラミングテンプレート"}}},"pageContext":{"slug":"/articles/competitive-programming-cpp-template"}}}